package chapter15;

/**
 * 可変性を最小限にする。
 */
public class Main {

	public static void main(String[] args) {
		// 不変クラスは、設計、実装、使用が可変クラスよりも容易である。
		// 不変クラスは誤りにくく、より安全である。
		// また、不変クラスは本質的にスレッドセーフであり、同期を必要としない。

		// 不変クラスにするためには、以下の 5 つの原則に従う。

		// 1. オブジェクトの状態を変更するためのいかなるメソッドも提供しない。
		// 例えば、セッターメソッド。

		// 2. クラスが拡張できないことを保証する。
		// サブクラスを作成させないようにする。クラスを final とすることで可能。

		// 3. 全てのフィールドを final にする。

		// 4. 全てのフィールドを private にする。

		// 5. 可変コンポーネントに対する独占的アクセスを保証する。
		// クラスが可変オブジェクトを参照しているフィールドを持っているならば、
		// そのクラスのクライアントがそれらのオブジェクトへの参照を取得できないことを保証する。
		// そのようなフィールドをクライアントが提供したオブジェクトで初期化してはいけないし、
		// アクセッサーからそのオブジェクト参照を返してはならない。

		// 不変クラスの例。
		Complex complex = new Complex(1.0, 2.0);
		Complex addedComplex = complex.add(new Complex(3.0, 4.0));
		System.out.println(addedComplex.toString());

		// 不変クラスの欠点。
		// 不変クラスは個々の異なる値に対して、別々のオブジェクトを必要とするため、
		// オブジェクトが大きい場合、インスタンス生成のコストが高くつく。
		// パフォーマンスが問題となる場合、可変クラスを利用することを検討する。
		// String クラスではなく、StringBuilder クラス。
	}

}
