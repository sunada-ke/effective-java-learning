package chapter18;

/**
 * 抽象クラスよりインタフェースを選ぶ
 */
public final class Main {

	public static void main(String[] args) {
		// 抽象クラスとインターフェイスの違いは、
		// 抽象クラスはいくつかのメソッドに対する実装を含むことが許されていて、
		// インターフェイスは許されていないということ。
		// 抽象クラスで定義された型を実装するには、クラスはその抽象クラスのサブクラスでなければならない。
		// インターフェイスはクラス階層のどこに位置していても、実装することが許されている。

		// 既存のクラスを新たなインターフェイスに対応させることは容易だが、
		// 継承の場合は既知のクラスを新たな抽象クラスを拡張することは容易ではない。
		// 継承の場合、型階層が複雑になり、子クラスが抽象クラスを拡張することが適切かどうかに関係なく、
		// 継承することを余儀される。
		// 例えば、Comparable インターフェイスが JDK に追加された際、多くの既知のクラスが
		// 容易にインターフェイスを実装することができた。

		// 複数のインターフェースを混ぜ合わせて振る舞わせることをミックスインと呼ぶ。
		// これは抽象クラスでは実現出来ない。なぜなら、Java ではクラスは ２ つ以上の親を持つこと(多重継承)ができないため。
		// 無理に継承を使って実装しようとすると、クラス階層が膨れ上がる。
		SingerSongWriter singerSongWriter = new Legend();
		singerSongWriter.sing(singerSongWriter.compose());

		// Java ではインターフェースに実装を含むことは許されていないが、それ単体で提供しても実装者の負担になるだけの場合がある。
		// そこで、インターフェースと一緒に骨格実装クラスを提供することでその問題を解決する。
		// (http://mat5ukawa.hateblo.jp/entry/2015/11/04/231842)
		// インターフェイスを発展させるより、抽象クラスを発展させる方がはるかに容易。
		// 適切なデフォルト実装を含む具象メソッドを追加メソッドを提供すれば良い。
		// インターフェイスの場合、コンパイルが通らなくなる。

		// インターフェイスは一旦リリースされて広く実装されたら、インターフェイスを変更することは不可能。
		// 最初に正しい設計をしなけらばならない。
		// 正式リリース前にできるだけ多くのプログラマにこのインターフェースを使って実装してもらい、欠陥を早期に発見できるようにすると良い。
	}

}
